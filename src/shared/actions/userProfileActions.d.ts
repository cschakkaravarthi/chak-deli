import { ThunkDispatch } from 'redux-thunk';
import { AnyAction } from 'redux';
import { LoadUserProfileDetailsAction, LoadUserProfilePictureAction, LoadOrgChartAction, UpdateUserProfile, UpdateUserProfileRequest, UpdateUserProfileError, UserProfileResponseError, OrgChartResponseError, ClearUserProfile, FetchUserProfile, FetchMyContacts, SetMyContacts, MyContactsResponseError, RemoveSingleContactType, InitiateUploadProfilePic, UploadProfilePictureSuccessType, UploadProfilePictureErrorType, ClearUserProfileUpdateError, RemoveUserProfilePic } from '../types/userProfileTypes';
import { UserProfileModel, UserProfilePicture, ContactResponse, ContactList, UserProfileUpdateResponse } from '../models/UserInfo.model';
import { Users } from '../models/OrgChart.model';
export declare const setUserProfileDetails: (userProfile: UserProfileModel) => LoadUserProfileDetailsAction;
export declare const setUserProfilePicture: (userProfilePicture: UserProfilePicture) => LoadUserProfilePictureAction;
export declare const loadUserProfileError: (error: string) => UserProfileResponseError;
export declare const fetchUserProfile: () => FetchUserProfile;
export declare const fetchUserProfileDetails: (email: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const fetchUserProfilePicture: (email: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const fetchAddToContactRequest: (email: string | undefined) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => void;
export declare const loadOrgChart: (orgChartusers: Users) => LoadOrgChartAction;
export declare const loadOrgChartError: (error: string) => OrgChartResponseError;
export declare const fetchOrgChart: (email: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const clearProfileData: () => ClearUserProfile;
export declare const updateUserProfileData: (res: UserProfileUpdateResponse) => UpdateUserProfile;
export declare const updateUserProfileRequest: () => UpdateUserProfileRequest;
export declare const clearUserProfileUpdateError: () => ClearUserProfileUpdateError;
export declare const updateUserProfileError: (error: string) => UpdateUserProfileError;
export declare const setUserProfileData: (userDetails: Pick<UserProfileModel, "email" | "photo" | "error" | "networkID" | "department" | "profilePicture" | "lastName" | "firstName" | "fullName" | "jobLocation" | "companyName" | "profitCenter" | "desk" | "officeNumber" | "mobileNumber" | "nickname" | "birthday" | "birthMonth" | "anniversaryDay" | "anniversaryMonth" | "languagesSpoken" | "professionalSkills" | "currentlyWorking" | "aboutMe" | "hideMobileNumberOnProfile" | "avatar">) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const fetchMyContactsRequest: () => FetchMyContacts;
export declare const setMyContactsList: (myContactsList: ContactList) => SetMyContacts;
export declare const fetchMyContactsError: (error: string) => MyContactsResponseError;
export declare const fetchMyContactsData: () => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const removeSingleContactFromList: (response: ContactResponse) => RemoveSingleContactType;
export declare const removeSingleContact: (email: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const uploadProfilePictureError: (error: string) => UploadProfilePictureErrorType;
export declare const uploadProfilePictureSuccess: () => UploadProfilePictureSuccessType;
export declare const initiateUploadProfilePicture: () => InitiateUploadProfilePic;
export declare const uploadUserProfilePicture: (photo: File) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
export declare const removeProfilePicture: (response: ContactResponse) => RemoveUserProfilePic;
export declare const removeProfilePic: () => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => Promise<void>;
//# sourceMappingURL=userProfileActions.d.ts.map